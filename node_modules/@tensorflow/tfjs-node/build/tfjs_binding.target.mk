# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := tfjs_binding
### Rules for action "deps-stage":
quiet_cmd_binding_gyp_tfjs_binding_target_deps_stage = ACTION binding_gyp_tfjs_binding_target_deps_stage $@
cmd_binding_gyp_tfjs_binding_target_deps_stage = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir); node /Users/itayniv/Documents/ITP/Thesis/github/lets-read-a-story/node_modules/@tensorflow/tfjs-node/scripts/deps-stage.js symlink "$(builddir)"

$(builddir)/libtensorflow.so: obj := $(abs_obj)
$(builddir)/libtensorflow.so: builddir := $(abs_builddir)
$(builddir)/libtensorflow.so: export BUILT_FRAMEWORKS_DIR := ${abs_builddir}
$(builddir)/libtensorflow.so: export BUILT_PRODUCTS_DIR := ${abs_builddir}
$(builddir)/libtensorflow.so: export CONFIGURATION := ${BUILDTYPE}
$(builddir)/libtensorflow.so: export DYLIB_INSTALL_NAME_BASE := @rpath
$(builddir)/libtensorflow.so: export EXECUTABLE_NAME := tfjs_binding.node
$(builddir)/libtensorflow.so: export EXECUTABLE_PATH := tfjs_binding.node
$(builddir)/libtensorflow.so: export FULL_PRODUCT_NAME := tfjs_binding.node
$(builddir)/libtensorflow.so: export LD_DYLIB_INSTALL_NAME := @rpath/tfjs_binding.node
$(builddir)/libtensorflow.so: export MACH_O_TYPE := mh_bundle
$(builddir)/libtensorflow.so: export PRODUCT_NAME := tfjs_binding
$(builddir)/libtensorflow.so: export PRODUCT_TYPE := com.apple.product-type.library.dynamic
$(builddir)/libtensorflow.so: export SDKROOT := 
$(builddir)/libtensorflow.so: export SRCROOT := ${abs_srcdir}/
$(builddir)/libtensorflow.so: export SOURCE_ROOT := ${SRCROOT}
$(builddir)/libtensorflow.so: export TARGET_BUILD_DIR := ${abs_builddir}
$(builddir)/libtensorflow.so: export TEMP_DIR := ${TMPDIR}
$(builddir)/libtensorflow.so: TOOLSET := $(TOOLSET)
$(builddir)/libtensorflow.so: /Users/itayniv/Documents/ITP/Thesis/github/lets-read-a-story/node_modules/@tensorflow/tfjs-node/scripts/deps-stage.js FORCE_DO_CMD
	$(call do_cmd,binding_gyp_tfjs_binding_target_deps_stage)

all_deps += $(builddir)/libtensorflow.so
action_binding_gyp_tfjs_binding_target_deps_stage_outputs := $(builddir)/libtensorflow.so


DEFS_Debug := \
	'-DNODE_GYP_MODULE_NAME=tfjs_binding' \
	'-DUSING_UV_SHARED=1' \
	'-DUSING_V8_SHARED=1' \
	'-DV8_DEPRECATION_WARNINGS=1' \
	'-D_DARWIN_USE_64_BIT_INODE=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION' \
	'-DDEBUG' \
	'-D_DEBUG' \
	'-DV8_ENABLE_CHECKS'

# Flags passed to all source files.
CFLAGS_Debug := \
	-O0 \
	-gdwarf-2 \
	-mmacosx-version-min=10.7 \
	-arch x86_64 \
	-Wall \
	-Wendif-labels \
	-W \
	-Wno-unused-parameter

# Flags passed to only C files.
CFLAGS_C_Debug := \
	-fno-strict-aliasing

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-std=gnu++1y \
	-stdlib=libc++ \
	-fno-rtti \
	-fno-exceptions \
	-fno-strict-aliasing

# Flags passed to only ObjC files.
CFLAGS_OBJC_Debug :=

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Debug :=

INCS_Debug := \
	-I/Users/itayniv/.node-gyp/10.11.0/include/node \
	-I/Users/itayniv/.node-gyp/10.11.0/src \
	-I/Users/itayniv/.node-gyp/10.11.0/deps/openssl/config \
	-I/Users/itayniv/.node-gyp/10.11.0/deps/openssl/openssl/include \
	-I/Users/itayniv/.node-gyp/10.11.0/deps/uv/include \
	-I/Users/itayniv/.node-gyp/10.11.0/deps/zlib \
	-I/Users/itayniv/.node-gyp/10.11.0/deps/v8/include \
	-I$(srcdir)/.. \
	-I/Users/itayniv/Documents/ITP/Thesis/github/lets-read-a-story/node_modules/@tensorflow/tfjs-node/deps/include

DEFS_Release := \
	'-DNODE_GYP_MODULE_NAME=tfjs_binding' \
	'-DUSING_UV_SHARED=1' \
	'-DUSING_V8_SHARED=1' \
	'-DV8_DEPRECATION_WARNINGS=1' \
	'-D_DARWIN_USE_64_BIT_INODE=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DBUILDING_NODE_EXTENSION'

# Flags passed to all source files.
CFLAGS_Release := \
	-Os \
	-gdwarf-2 \
	-mmacosx-version-min=10.7 \
	-arch x86_64 \
	-Wall \
	-Wendif-labels \
	-W \
	-Wno-unused-parameter

# Flags passed to only C files.
CFLAGS_C_Release := \
	-fno-strict-aliasing

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-std=gnu++1y \
	-stdlib=libc++ \
	-fno-rtti \
	-fno-exceptions \
	-fno-strict-aliasing

# Flags passed to only ObjC files.
CFLAGS_OBJC_Release :=

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Release :=

INCS_Release := \
	-I/Users/itayniv/.node-gyp/10.11.0/include/node \
	-I/Users/itayniv/.node-gyp/10.11.0/src \
	-I/Users/itayniv/.node-gyp/10.11.0/deps/openssl/config \
	-I/Users/itayniv/.node-gyp/10.11.0/deps/openssl/openssl/include \
	-I/Users/itayniv/.node-gyp/10.11.0/deps/uv/include \
	-I/Users/itayniv/.node-gyp/10.11.0/deps/zlib \
	-I/Users/itayniv/.node-gyp/10.11.0/deps/v8/include \
	-I$(srcdir)/.. \
	-I/Users/itayniv/Documents/ITP/Thesis/github/lets-read-a-story/node_modules/@tensorflow/tfjs-node/deps/include

OBJS := \
	$(obj).target/$(TARGET)/binding/tfjs_backend.o \
	$(obj).target/$(TARGET)/binding/tfjs_binding.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# Make sure our actions/rules run before any of us.
$(OBJS): | $(action_binding_gyp_tfjs_binding_target_deps_stage_outputs)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))
$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))
$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
# Build our special outputs first.
$(builddir)/tfjs_binding.node: | $(action_binding_gyp_tfjs_binding_target_deps_stage_outputs)

# Preserve order dependency of special output on deps.
$(action_binding_gyp_tfjs_binding_target_deps_stage_outputs): | 

LDFLAGS_Debug := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first \
	-mmacosx-version-min=10.7 \
	-arch x86_64 \
	-L$(builddir) \
	-stdlib=libc++ \
	-L$(builddir)

LIBTOOLFLAGS_Debug := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first

LDFLAGS_Release := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first \
	-mmacosx-version-min=10.7 \
	-arch x86_64 \
	-L$(builddir) \
	-stdlib=libc++ \
	-L$(builddir)

LIBTOOLFLAGS_Release := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first

LIBS := \
	-Wl,-rpath,@loader_path \
	-ltensorflow

$(builddir)/tfjs_binding.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(builddir)/tfjs_binding.node: LIBS := $(LIBS)
$(builddir)/tfjs_binding.node: GYP_LIBTOOLFLAGS := $(LIBTOOLFLAGS_$(BUILDTYPE))
$(builddir)/tfjs_binding.node: TOOLSET := $(TOOLSET)
$(builddir)/tfjs_binding.node: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(builddir)/tfjs_binding.node
# Add target alias
.PHONY: tfjs_binding
tfjs_binding: $(builddir)/tfjs_binding.node

# Short alias for building this executable.
.PHONY: tfjs_binding.node
tfjs_binding.node: $(builddir)/tfjs_binding.node

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/tfjs_binding.node

